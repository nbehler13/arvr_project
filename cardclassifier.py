# -*- coding: utf-8 -*-
"""CardClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-39hKTvkdHKUk8nuMYB5mqG1iAxvk6Sa
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import tensorflow as tf
import pandas as pd
import xml.etree.ElementTree as ET
import io
import os
import sys
import urllib
import cv2
import time
from PIL import Image

from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization
from keras.layers import Conv2D, MaxPooling2D
from keras import regularizers, optimizers

import seaborn as sns
from pylab import rcParams
import matplotlib.pyplot as plt
from matplotlib import rc
from pandas.plotting import register_matplotlib_converters

# %matplotlib inline
# %config InlineBackend.figure_format='retina'

register_matplotlib_converters()
sns.set(style='whitegrid', palette='muted', font_scale=1.5)

rcParams['figure.figsize'] = 22, 10

RANDOM_SEED = 42

np.random.seed(RANDOM_SEED)
tf.random.set_seed(RANDOM_SEED)

snapshots_path = os.path.join(os.path.dirname(__file__), 'snapshots')

BATCHSIZE = 64
EPOCHS = 30
IMG_SIZE = (80, 80)

cropped_train_path = "classifier_train"

CLASSES_FILE = os.path.join(cropped_train_path, 'classes.csv')
labels_to_names = pd.read_csv(
    CLASSES_FILE,
    header=None,
    index_col=0
).to_dict()[1]

TRAIN_ANNOTATIONS_FILE = os.path.join(cropped_train_path, 'annotations_augmented.csv')
trainDF = pd.read_csv(TRAIN_ANNOTATIONS_FILE, names=['image_name', 'class_name'])

datagen = keras.preprocessing.image.ImageDataGenerator(rescale=1./255, rotation_range=360,
                                                       shear_range=15.0, horizontal_flip=False,
                                                       vertical_flip=False)
train_generator = datagen.flow_from_dataframe(
    dataframe=trainDF,
    x_col='image_name',
    y_col='class_name',
    class_mode='categorical',
    target_size=IMG_SIZE,
    batch_size=BATCHSIZE,
    color_mode='grayscale',
    shuffle=True
)

cropped_test_path = "./classifier_test"

TEST_ANNOTATIONS_FILE = os.path.join(cropped_test_path, 'annotations.csv')
testDF = pd.read_csv(TEST_ANNOTATIONS_FILE, names=['image_name', 'class_name'])

test_generator = datagen.flow_from_dataframe(
    dataframe=testDF,
    x_col='image_name',
    y_col='class_name',
    class_mode='categorical',
    target_size=IMG_SIZE,
    batch_size=BATCHSIZE,
    color_mode='grayscale'
)


def plot_history(history, model_path):

    fig, (ax1, ax2) = plt.subplots(2, tight_layout=True, figsize=(18, 9))

    ax1.plot(history.history['loss'])
    ax1.plot(history.history['val_loss'])
    fig.suptitle('model train vs validation\n')
    ax1.set(xlabel='epoch', ylabel='loss')
    ax1.legend(['train'], loc='upper right')
    ax1.legend(['train', 'validation'], loc='upper right')

    ax2.plot(history.history['accuracy'])
    ax2.plot(history.history['val_accuracy'])
    ax2.set(xlabel='epoch', ylabel='accuracy')
    ax2.legend(['train'], loc='upper right')
    ax2.legend(['train', 'validation'], loc='lower right')

    plot_path = model_path[0:-3]
    fig.savefig(plot_path+".png", format='png', dpi=600)
    plt.show()


model = Sequential([
    Conv2D(16, 3, padding='same', activation='relu', input_shape=(80, 80, 1)),
    MaxPooling2D(),
    Conv2D(32, 3, activation='relu'),
    MaxPooling2D(),
    Conv2D(64, 3, activation='relu'),
    MaxPooling2D(),
    Conv2D(64, 3, activation='relu'),
    Flatten(),
    Dense(100, activation='relu'),
    Dropout(0.5),
    Dense(52, activation='softmax')
])

print(model.summary())
#sys.exit()

def scheduler(epoch):
  if epoch < 10:
    return 0.001
  else:
    return 0.001 * tf.math.exp(0.1 * (10 - epoch))

lr_callback = tf.keras.callbacks.LearningRateScheduler(scheduler)
es_callback = tf.keras.callbacks.EarlyStopping(monitor="val_accuracy", min_delta=0.005, patience=2)

optimizer = optimizers.Adam(learning_rate=0.001)
model.compile(optimizer=optimizer,
              loss="categorical_crossentropy", metrics=["accuracy"])

model_path = snapshots_path
model_name = os.path.join(model_path, "CardClassifier_small_Adam.h5")

STEP_SIZE_TRAIN = train_generator.n//train_generator.batch_size

history = model.fit(train_generator,
                    steps_per_epoch=STEP_SIZE_TRAIN,
                    epochs=EPOCHS,
                    callbacks=[lr_callback],
                    validation_data=test_generator
                    )
model.save(model_name)
plot_history(history, model_name)


img_name = os.path.join(cropped_train_path, "0.jpg")
img = cv2.imread(img_name, cv2.IMREAD_GRAYSCALE)
img = img/255.0
img = img.reshape(-1,80,80,1)
prediction = model.predict(img)
idx = np.argmax(prediction[0])
for key, value in labels_to_names.items():
    if value == idx:
      print(key)
      break

